name: "Run Runtime Action Destroy"
description: "Runs Runtime Action Destroy with parameters"
inputs:
  FEATURES_LEVEL_LOG:
    description: "Log Level"
    required: true
  CLIENT_ID:
    description: "CLIENT ID"
    required: true
  CLIENT_KEY:
    description: "CLIENT KEY"
    required: true
  CLIENT_REALM:
    description: "CLIENT REALM"
    required: true
  REPOSITORY_NAME:
    description: "Git Repository Name"
    required: true
  AWS_ACCESS_KEY_ID:
    description: "AWS ACCESS KEY ID from console"
    required: false
  AWS_SECRET_ACCESS_KEY:
    description: "AWS SECRET ACCESS KEY from console"
    required: false
  AWS_SESSION_TOKEN:
    description: "AWS SESSION TOKEN from console"
    required: false
  AWS_REGION:
    description: "AWS REGION"
    required: true
  AWS_ROLE_ARN:
    description: "AWS ROLE ARN"
    required: false
  RUN_TASK_ID:
    description: "Runtime Run Task Id"
    required: true 
  CONTAINER_URL:
    description: "Destroy Container url"
    default: stackspot/runtime-job-destroy:latest
    required: false
  FEATURES_TERRAFORM_MODULES:
    description: "Terraform Modules"
    required: false
  PATH_TO_MOUNT:
    description: "Path to mount inside the docker"
    required: true
    default: ${{ github.workspace }}
  LOCALEXEC_ENABLED:
    description: "If Runtimes will allow execution of the local-exec command within terraform"
    required: false
    default: false
  TF_LOG_PROVIDER:
    description: "Level tf log provider - info, debug, warn or trace"
    required: false

runs:
  using: "composite"
  steps:

    - name: Check Runner
      run: echo ðŸ¤– OS runner is $(uname)
      shell: bash
      
    - name: Configure aws credentials
      id: aws-cred
      if: ${{ inputs.AWS_ROLE_ARN != 0 }}
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ inputs.AWS_ROLE_ARN }}
        aws-region: ${{ inputs.AWS_REGION }}
        output-credentials: true
      
    - name: Run Runtime Action Destroy
      run: |
        FLAGS=$(echo "-v ${{ inputs.PATH_TO_MOUNT }}:/app-volume  \
        -e FEATURES_LEVEL_LOG=${{ inputs.FEATURES_LEVEL_LOG }} \
        -e AUTHENTICATE_CLIENT_ID=${{ inputs.CLIENT_ID }} \
        -e AUTHENTICATE_CLIENT_SECRET=${{ inputs.CLIENT_KEY }} \
        -e AUTHENTICATE_CLIENT_REALMS=${{ inputs.CLIENT_REALM }} \
        -e AUTHENTICATE_URL=https://idm.stackspot.com \
        -e REPOSITORY_NAME=${{ inputs.REPOSITORY_NAME }} \
        -e FEATURES_API_MANAGER=https://runtime-manager.v1.stackspot.com \
        -e FEATURES_BASEPATH_TMP=/tmp/runtime/deploys \
        -e FEATURES_BASEPATH_EBS=/opt/runtime \
        -e FEATURES_TEMPLATES_FILEPATH=/app/ \
        -e FEATURES_BASEPATH_TERRAFORM=/root/.asdf/shims/terraform \
        -e AWS_REGION=${{ inputs.AWS_REGION }} \
        -e FEATURES_RELEASE_LOCALEXEC=${{ inputs.LOCALEXEC_ENABLED }}")

        if [ -z "${{ inputs.AWS_ROLE_ARN }}" ]; then
          FLAGS=$(echo "$FLAGS -e AWS_ACCESS_KEY_ID=${{ inputs.AWS_ACCESS_KEY_ID }}")
          FLAGS=$(echo "$FLAGS -e AWS_SECRET_ACCESS_KEY=${{ inputs.AWS_SECRET_ACCESS_KEY }}")
          FLAGS=$(echo "$FLAGS -e AWS_SESSION_TOKEN=${{ inputs.AWS_SESSION_TOKEN }}")
        fi

        if [ ! -z "${{ inputs.AWS_ROLE_ARN }}" ]; then
          FLAGS=$(echo "$FLAGS -e AWS_ACCESS_KEY_ID=${{ steps.aws-cred.outputs.aws-access-key-id }}")
          FLAGS=$(echo "$FLAGS -e AWS_SECRET_ACCESS_KEY=${{ steps.aws-cred.outputs.aws-secret-access-key }}")
          FLAGS=$(echo "$FLAGS -e AWS_SESSION_TOKEN=${{ steps.aws-cred.outputs.aws-session-token }}")
        fi

        if [ ! -z "${{ inputs.TF_LOG_PROVIDER }}" ]; then
          FLAGS=$(echo "$FLAGS -e FEATURES_TERRAFORM_LOGPROVIDER=${{ inputs.TF_LOG_PROVIDER }}")
        fi

        docker run --rm \
        $FLAGS \
        -e FEATURES_TERRAFORM_MODULES='${{ inputs.FEATURES_TERRAFORM_MODULES }}' \
        --entrypoint=/app/stackspot-runtime-job-destroy \
        ${{ inputs.CONTAINER_URL }} start --run-task-id="${{ inputs.RUN_TASK_ID }}"
      shell: bash

branding:
    icon: 'terminal'
    color: 'orange'